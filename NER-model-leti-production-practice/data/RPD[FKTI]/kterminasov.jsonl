{"id":9752,"text":"285443\nМногопоточное и распределенное программирование\nДисциплина посвящена изучению современных методов и средств обеспечения высокопроизводительных вычислений. Начиная с проектирования параллельных программ, заканчивая анализом производительности и автоматизированным поиском ошибок. В курсе рассматриваются современные библиотеки программ, стандарты и методы параллельного программирования как в многоядерной среде, так и в распределённых системах. Большое внимание уделено теоретическим основам современных алгоритмов неблокирующей синхронизации и алгоритмам без ожидания.. Изучение: принципов построения и исполнения параллельных приложений. Получение знаний о видах примитивов синхронизации и алгоритмах их реализации. Освоение алгоритмических подходов к уменьшению задержек при синхронизации на различных структурах данных, а также методов поиска и профилактики ошибок параллельного программирования. Формирование: навыков применения на практике методов и средств распределения задач по вычислительным элементам. Умение правильно выбирать средства реализации высокопроизводительных приложений, проектировать высокопроизводительные приложения с применением шаблонов параллельного программирования. Умение использовать средства асинхронной коммуникации приложений. Освоение: навыков выбора шаблонов параллельного программирования для решения конкретных задач. Умение использовать инструменты цикла разработки высокопроизводительных приложений. Освоение навыков выбора шаблонов параллельного программирования для решения конкретных задач.. Текущий контроль в соответствии с графиком проводится в форме коллоквиумов, на которых студенты должны активно участвовать в ответах на вопросы, пример которых приведен ниже. Вычислительные системы с распределённой памятью  Создание\/завершение потоков.  Вычислительные системы с общей памятью  Примитивы синхронизации.  Гибридные архитектуры Алгоритмы синхронизации. . . Введение. Место дисциплины в ООП. Современное состояние проблемы. Тема 1. Работа с потоками. Создание\/завершение потоков. Примитивы синхронизации. Алгоритмы синхронизации. Атомарные снимки регистров. Тема 2. Параллельное программирование. Ошибки параллельного программирования. Профилирование многопоточных приложений. Java.util.concurrent и Fork-Join Framework. OpenMP и Intel TBB. Шаблоны параллельного программирования. Кластерные вычисления. Консенсус. Сети Петри. Тема 3. Управление памятью в многопоточных системах. Оптимизации в компиляторах. Транзакционная память. Асинхронный ввод\/вывод. Wait-free MRMW снимок регистров. Средства поиска ошибок. Модель памяти. Lock-free схемы управления памятью. Модель акторов. Заключение. Общие выводы по курсу. Рекомендации для подготовки к экзамену\n","cats":[],"entities":[[7,54,"Knowledge"],[85,160,"Knowledge"],[172,207,"Knowledge"],[221,284,"Knowledge"],[322,341,"Tool"],[343,450,"Knowledge"],[477,549,"Knowledge"],[552,575,"Knowledge"],[589,645,"Knowledge"],[666,723,"Knowledge"],[734,829,"Knowledge"],[839,906,"Knowledge"],[922,1018,"Knowledge"],[1020,1203,"Knowledge"],[1204,1268,"Knowledge"],[1280,1363,"Knowledge"],[1364,1447,"Knowledge"],[1458,1542,"Knowledge"],[1768,1796,"Knowledge"],[1798,1863,"Knowledge"],[1864,1910,"Knowledge"],[1988,2007,"Knowledge"],[2008,2036,"Knowledge"],[2037,2061,"Knowledge"],[2061,2086,"Knowledge"],[2087,2114,"Knowledge"],[2123,2153,"Knowledge"],[2154,2192,"Knowledge"],[2193,2233,"Knowledge"],[2234,2254,"Tool"],[2257,2277,"Tool"],[2278,2284,"Tool"],[2286,2296,"Tool"],[2298,2336,"Knowledge"],[2338,2361,"Knowledge"],[2361,2370,"Knowledge"],[2372,2383,"Knowledge"],[2392,2436,"Knowledge"],[2437,2464,"Knowledge"],[2465,2487,"Knowledge"],[2488,2511,"Knowledge"],[2511,2543,"Knowledge"],[2545,2568,"Knowledge"],[2569,2583,"Knowledge"],[2584,2619,"Knowledge"],[2620,2635,"Knowledge"],[2636,2647,"Knowledge"],[2648,2669,"Knowledge"]],"Comments":[]}
{"id":9753,"text":"289003\nВерификация и аттестация программного обеспечения\nДисциплина направлена на изучение основных характеристик качества программных систем (ПС): корректности и надежности. Основные методы проверки корректности программ - верификация и аттестация - рассматриваются на различных этапах жизненного цикла ПС. Изучаются как формальные методы доказательства корректности, так и тестирование как основное средство обеспечения корректности. Особое внимание уделяется оценке качества объектно-ориентированных ПС. Рассматриваются основные понятия надежности и работоспособности ПС, изучаются математические модели, используемые для анализа и прогнозирования надежности ПС, количественные оценки и способы повышения надежности ПС. . Изучение системных основ программной инженерии, знание профилей стандартов жизненного цикла программного продукта. Формирование умения использовать модели и процессы управления программными проектами, методы планирования и управления ресурсами жизненного цикла программного обеспечения. Освоение навыков управления версиями и релизами программного продукта, навыков поддержки целостности конфигурации в течение жизненного цикла программного проекта. Владение методами обеспечения качества объектов профессиональной деятельности, технологиями проектирования и управления объектами профессиональной деятельности.. Текущий контроль в соответствии с графиком проводится в форме коллоквиумов, на которых студенты должны активно участвовать в ответах на вопросы, пример которых приведен ниже. В чем состоит  тестирование функциональных возможностей Web-приложений? Какие особенности тестирования конфигурации и совместимости? Какие методы используются для тестирования масштабируемости, загруженности? Обоснуйте необходимость тестирования безопасности. Какие методы используются для оценки удобства использования ПС?. . Введение. Место дисциплины в ООП. Современное состояние проблемы. Тема 1. Эволюция понятия качества программного обеспечения. Изменение понятия качества ПО во времени. Многомерность качества. Общественная заинтересованность в качестве и ущерб от плохого качества. Стоимость внедрения моделей качества. Направления инженерии качества. Роли людей, процессов, методов, инструментов и технологий в обеспечении качества. Тема 2. Идентификация и классификация характеристик качества. Метрики и модели качества. Качество прикладного ПО, качество данных, качество информации, качество административного управления, качество сервиса. Модели качества по МакКолу, по Боему, ISO 9126, CMMI. Тема 3. Оценка корректности программ. Верификация и аттестация ПС. ПО. Терминология, задачи и ограничения верификации и аттестации. Планирование верификации и аттестации. Использование верификации и аттестации на различных этапах жизненного цикла. Формальные методы верификации и аттестации. Тема 4. Метрическая оценка качества объектно-ориентированных ПС. Метрические особенности ОО ПС. Эволюция мер связи для ОО ПС. Объектно-ориентированные метрики. Метрики Чидамбера и Керера, их использование. Метрики Лоренца и Кидда. Метрики для ОО-проектов. Набор метрик Фернандо Абреу. Тема 5. Дефекты, ошибки и риски ПО. Тестирование объектно-ориентированных ПС. программ. Тестирование ОО интеграции. ОО тестирование правильности. Основы тестирования классов. Оцениваемые факторы тестирования классов. Способы построения тестовых случаев. Тема 6. Автоматизация функционального тестирования. Сущность и преимущества автоматизации тестирования. Зависимость успеха автоматизации от степени зрелости процесса тестирования. Проблемы разработки и поддержки набора автоматизированных функциональных тестов и методики их разработки. Формирование результатов тестового прогона и анализ результатов. Функциональная декомпозиция и повторное использование кода. Автоматизированная генерация входных тестовых данных. Матрица покрытия требований тестовыми сценариями, цели написания плана тестирования. Особенности проектирования тестов для разных типов приложений. Тема 7. Тестирование Web-приложений. Тестирование удобства использования ПС. Тестирование функциональных возможностей, практичности, навигации, форм, содержимого страницы, конфигурации и совместимости, масштабируемости, загруженности, безопасности, сквозных транзакций, баз данных. Оценка удобства использования ПС. Методы тестирования используемости ПС, применяемые группой тестирования проекта – общие и частные типовые методики, тестирование на основе пользовательских вариантов использования. Тема 8. Методы обеспечения и повышения надежности и работоспособности ПС. Методы повышения надежности программ. Способы введения избыточности для повышения надежности. Временная, информационная и программная избыточность. Тема 9. Обеспечение и управление качеством ПО. Обеспечение качества процесса создания ПО и качества программного продукта. Планирование качества. Структура системы качества. Контроль и сертификация качества. Измерение качества на этапе сопровождения продукта. Анализ требований безопасности ПС и выработка критериев оценки безопасности. Техники управления качеством ПО. Заключение. Основные направления совершенствования процессов обеспечения качества ПС.\n","cats":[],"entities":[[224,248,"Knowledge"],[478,505,"Tool"],[585,606,"Tool"],[734,771,"Knowledge"],[780,839,"Knowledge"],[1568,1582,"Tool"],[1939,1963,"Tool"],[2007,2030,"Knowledge"],[2031,2102,"Knowledge"],[2103,2140,"Knowledge"],[2141,2172,"Knowledge"],[2173,2254,"Knowledge"],[2263,2316,"Knowledge"],[2317,2343,"Knowledge"],[2344,2367,"Knowledge"],[2368,2384,"Knowledge"],[2386,2405,"Knowledge"],[2407,2444,"Knowledge"],[2445,2462,"Knowledge"],[2463,2517,"Knowledge"],[2526,2555,"Knowledge"],[2556,2583,"Knowledge"],[2589,2648,"Knowledge"],[2766,2809,"Knowledge"],[2875,2904,"Knowledge"],[2936,2969,"Knowledge"],[2970,2996,"Knowledge"],[3016,3039,"Knowledge"],[3041,3065,"Knowledge"],[3066,3094,"Knowledge"],[3102,3130,"Knowledge"],[3241,3269,"Knowledge"],[3270,3311,"Knowledge"],[3312,3348,"Knowledge"],[3401,3452,"Knowledge"],[3453,3528,"Knowledge"],[3529,3634,"Knowledge"],[3700,3759,"Knowledge"],[3760,3813,"Tool"],[3813,3863,"Tool"],[3864,3898,"Knowledge"],[3899,3961,"Knowledge"],[5018,5049,"Knowledge"],[5063,5136,"Knowledge"]],"Comments":[]}
{"id":9754,"text":"275916\nПланирование эксперимента и теория риска\nРассматриваются основные разделы теории математического планирования регрессионного эксперимента метод наименьших квадратов для линейных и нелинейных по параметрам моделей регрессии, планирование эксперимента по выяснению механизма явления, направленное на поиск математической модели. Рассматривается краткосрочная модель индивидуального риска в задачах страхования. Изучение метода наименьших квадратов для обработки регрессионных наблюдений и основных методов проведения анализа и планирования эксперимента. Получение знаний об основных задачах планирования эксперимента и теории риска. Формирование навыка проведения статистического анализа данных методом наименьших квадратов. Умение самостоятельно составлять алгоритмы и программы решения задач планирования экспериментов на основе известных методов и алгоритмов. Умение модифицировать известные алгоритмы планирования эксперимента для их использования в различных прикладных областях (навигация, геодезия, метеорология, сейсмология). Освоение современной информации о тенденциях развития планирования эксперимента и теории риска. Приобретение навыков работы с литературными источниками по планированию эксперимента и теории риска.. Контрольные работы состоят в развернутом письменном ответе на вопросы. На каждой контрольной работе студент должен дать ответы на 2 вопроса. Примеры вопросов в билете: Понятие плана эксперимента.  Критерии оптимальности планов эксперимента. ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1 Дисциплина Планирование эксперимента и теория риска 1. Эквивалентность Д-оптимальных и минимаксных планов 2. Итерационные методы построения линейно оптимальных планов: градиентный метод, метод Федорова. УТВЕРЖДАЮ Заведующий кафедрой                                                   К.В. Кринкин. Введение. Предмет дисциплины. Исторический обзор. Связь с другими дисциплинами учебного плана, в том числе с теорией вероятности и математической статистикой и ее приложениями в теории навигации, метеорологии, и страховании. Тема 1. Линейный метод наименьших квадратов. Линейная модель наблюдений. Оценивание коэффициентов регрессии методом наименьших квадратов. Матрица ковариаций оценок наименьших квадратов. Свойства оценок наименьших квадратов коэффициентов регрессии. Метод наименьших квадратов в случае коррелированных наблюдений. Дисперсионный анализ линейной модели регрессии. Тема 2. Нелинейный метод наименьших квадратов. Нелинейная модель наблюдений. Линеаризация модели и матрица Якоби. Частные виды матриц Якоби матрицы Колмогорова-Мальцева. Метод Гаусса-Ньютона. Тема 3. Способы сравнения результатов эксперимента. Функция потерь для регрессионных экспериментов. Понятие плана эксперимента. Точные и непрерывные планы. Критерии оптимальности планов эксперимента. Тема 4. Непрерывные оптимальные планы. Основные свойства информационной матрицы. Эквивалентность Д-оптимальных и минимаксных планов. Основные свойства этих планов. Полиномиальная одномерная регрессия. Численные методы построения оптимальных планов. Линейные критерии оптимальности: А-оптимальность, экстраполяция в точку. Итерационные методы построения линейно оптимальных планов: градиентный метод, метод Федорова. Тема 5. Нелинейная параметризация функции отклика. Локально Д-оптимальные планы. Навигационная задача определения места судна как задача нелинейного планирования эксперимента. Д- и А-оптимальный выбор маяков в дальномерной задаче навигации. Угломерные задачи навигации. Комбинированная навигационная задача по определению места судна как задача планирования эксперимента для нескольких откликов. Тема 6. Функционалы риска. Понятие риска. Упорядочение рисков на множестве рисков. Когерентные меры риска. Меры риска Var и CVaR. Тема 7. Модели кратковременного риска в страховании. Модель индивидуального риска. Вероятность разорения. Модель коллективного риска. Заключение. Другие задачи планирования эксперимента и теории риска. Приложения. Перспективы\n","cats":[],"entities":[[81,144,"Knowledge"],[145,229,"Knowledge"],[364,414,"Knowledge"],[425,452,"Knowledge"],[1515,1555,"Knowledge"],[1560,1609,"Knowledge"],[1613,1707,"Knowledge"],[1910,1958,"Knowledge"],[1979,1995,"Knowledge"],[1996,2009,"Knowledge"],[2034,2069,"Knowledge"],[2071,2097,"Knowledge"],[2099,2162,"Knowledge"],[2164,2212,"Knowledge"],[2212,2272,"Knowledge"],[2274,2336,"Knowledge"],[2338,2385,"Knowledge"],[2394,2432,"Knowledge"],[2433,2462,"Knowledge"],[2463,2499,"Knowledge"],[2630,2677,"Knowledge"],[2734,2776,"Knowledge"],[2786,2816,"Knowledge"],[2817,2858,"Knowledge"],[2859,2941,"Knowledge"],[2943,2977,"Knowledge"],[2979,3026,"Knowledge"],[3027,3099,"Knowledge"],[3100,3194,"Knowledge"],[3202,3244,"Knowledge"],[3245,3275,"Knowledge"],[3275,3370,"Knowledge"],[3370,3434,"Knowledge"],[3435,3463,"Knowledge"],[3464,3589,"Knowledge"],[3598,3616,"Knowledge"],[3617,3631,"Knowledge"],[3632,3672,"Knowledge"],[3673,3697,"Knowledge"],[3697,3719,"Knowledge"],[3728,3772,"Knowledge"],[3773,3802,"Knowledge"],[3803,3825,"Knowledge"],[3826,3854,"Knowledge"]],"Comments":[]}
{"id":9755,"text":"273913\nЦифровое производство\n Изучается архитектура систем цифрового производства, основанная на современном подходе к проектированию с использованием моделей. Приводятся примеры архитектурных решений конкретных систем цифрового производства. Рассматривается технология обучения проектированию систем цифрового производства на основе модельного подхода к разработке с использованием case-средства поддерживающего концепцию на основе унифицированного языка моделирования UML. .  Целью изучения дисциплины является: - приобретение теоретических знаний об основных технологиях проектирования систем цифрового производства; - приобретение практических навыков разработки, сопровождения и внедрения фрагментов систем цифрового производства на практике; - формирование умений использовать case-средства проектирования, поддерживающих концепцию унифицированного языка моделирования UML в системах цифрового производства. Задачами изучения дисциплины являются: - формирование умений правильно и адекватно строить модели систем цифрового производства; - приобретение навыков разработки, сопровождения и внедрения фрагментов систем цифрового производства. Знание основных методов технологии проектирования систем цифрового производства. Формирование умений использовать case-средства проектирования, поддерживающих концепцию унифицированного языка моделирования UML в системах цифрового производства. Освоение навыков разработки, сопровождения и внедрения фрагментов систем цифрового производства на практике;. Правила оформления индивидуальных заданий 1. Темы трех заданий: - построение модели прецедентов фрагмента системы цифрового производства,    может быть выбрана тема ВКР студента.   - построение модели деятельности фрагмента системы цифрового производства; -  построение модели состояний фрагмента системы цифрового производства; Цель заданий : - освоение основных технологий проектирования  систем цифрового производства; - приобретение навыков разработки, сопровождения и внедрения  фрагментов систем цифрового производства на практике; - формирование умений использовать  case-средства проектирования, поддерживающих концепцию  унифицированного  языка моделирования UML в системах цифрового производства. 2.    Каждый файл с заданием именовать: № бригады- № задания- № версии задания.doc     Например:  бригада № 5,  задание № 4, версии задания № 3     Имя файла будет: 5-4-3.doc 3.  Файл задания  присылать только в формате.doc 4. Титульный лист, соответствующий требованиям Оформления НТО, принятых в СПбГЭТУ \"ЛЭТИ\". 5. Лист ошибок и замечаний (последний лист в задании). На этом листе указываются замечания, ошибки и их исправления. Если ошибок и замечаний нет, то лист «пустой». 6. Текст  задания должен быть оформлен в редакторе Microsoft Word, набирается шрифтом Times New Roman, кеглем 12, через одинарный интервал. Размер листа – А4. Все поля по 2,5 см. Нумерация страниц – внизу, по центру.  Рисунки - скрины экрана из case-средства проектирования моделей, расположены по центру, с подписями (например: Рисунок 1. Схема 1) 7. Формат сдачи заданий: преподавателю в электронном виде с последующим размещением в Moodle.. Задание 1.  Построение модели прецедентов фрагмента системы цифрового производства. Задание 2.  Построение модели деятельности фрагмента системы цифрового производства. Задание 3. Построение модели состояний фрагмента системы цифрового производства. . Основная терминология, вопросы и принципы разработки. В самом общем смысле термин «цифровое производство» означает комплексный подход к производству, который сосредоточен вокруг корпоративной информационной системы. Переход к цифровому производству стал более популярным с ростом объединение предприятий, работающих под централизованным управлением и решающих общие задачи. Бизнес-модель – это описание предприятия, как сложной системы, с заданной точностью. В рамках бизнес-модели отображаются все объекты (сущности), процессы, правила выполнения операций, существующая стратегия развития, а также критерии оценки эффективности функционирования системы. Классификация и характеристики. Корпоративные информационные системы, которые являются основой цифрового производства можно разделить на два класса: производственные и финансово-управленческие 1. Производственные системы (также называемые системами производственного управления) включают подклассы средних и крупных интегрированных систем. 2. Финансово-управленческие системы включают подкласс малых интегрированных систем. Такие системы предназначены для ведения учета по одному или нескольким направлениям (бухгалтерия, сбыт, склад, кадры и т.д.). Методология реализации. Как уже отмечалось, любая производственная компания, в том числе и корпорация, борется за конкурентоспособность своих товаров на рынке. Основными целями производственных компаний являются: - снижение реальной себестоимости продукции; - повышение производительности производства за счет эффективного планирования производственных мощностей и ресурсов. Классификация систем цифрового производства: MRP, MRPII, ERP, CRM и.т.д. Интеграция в информационную среду предприятия. Интеграция в информационную среду предприятия является проблемой современных корпораций и крупных предприятий. В таких условиях становится необходимым построение распределенных систем цифрового производства, которые согласуют взаимодействие всех компонентов производственной структуры с использованием корпоративных информационных сетей. Особенности архитектурных решений оценка функциональной и информационной связности. При проектировании архитектуры приложений первым шагом должен быть выбор используемых стандартов. С увеличением сложности информационных систем важность соответствия программного обеспечения международным стандартам возрастает. Стандарты используются для достижения следующих целей: – портируемость приложений – перенос приложений на различные аппаратные платформы, операционные системы, сетевые протоколы; – интероперабельность – стандарты определяют общие форматы и интерфейсы взаимодействия программных систем; – снижение стоимости системы – интеграция программных систем, поддерживающих общепринятые стандарты, уменьшает стоимость приложений для конечного пользователя; – снижение риска выбора программного продукта – использование стандартов освобождает разработчика от привязанности к конкретному программному продукту; – увеличение времени жизни системы – соответствие стандартам уменьшает риск быстрого устаревания системы. Оценивается функциональная и информационная связность системы. Бизнес процессы. Бизнес-процесс определяется как логически завершённый набор взаимосвязанных и взаимодействующих видов деятельности, поддерживающий деятельность организации и реализующий её политику, направленную на достижение поставленных целей. Бизнес-модель определяется как формализованное (графическое, табличное, текстовое, символьное) описание бизнес-процессов, отражающее реально существующую или предполагаемую деятельность предприятия. Моделирование прецедентов. Моделирование прецедентов тесно связано с установлением требований. Требования, изложенные в текстовом виде в документе описания требований, необходимо довести до прецедентов, зафиксированных в документе спецификации требований. Если остальной процесс разработки направляется прецедентами, то процесс называется проблемно-ориентированным. Моделирование прецедентов существенно итеративный и наращиваемый процесс. Первоначальную диаграмму (модель) прецедентов можно определить на основе требований верхнего уровня. Это может быть модель бизнес-прецедентов. Для дальнейшего уточнения прецедентов следует руководствоваться более детализированными требованиями. Если в течение жизненного цикла разработки требования пользователей подвергаются изменениям, эти изменения следует отразить сперва в документе описания требований, а уже затем — в модели прецедентов. Затем изменения в прецедентах доводятся до других моделей. Моделирование деятельности и состояний. Диаграмма (модель) деятельности показывает последовательность этапов, образующих сложный процесс, например вычислительный алгоритм или технологический процесс. Диаграмма деятельности показывает поток управления, но сосредоточивает внимание на операциях, а не на объектах. Диаграммы деятельности особенно полезны на ранних этапах проектирования алгоритмов и технологических процессов. Строится модель состояний системы цифрового производства.\n","cats":[],"entities":[[433,474,"Tool"],[529,618,"Knowledge"],[635,734,"Knowledge"],[763,811,"Knowledge"],[855,878,"Tool"],[968,1041,"Knowledge"],[1058,1144,"Knowledge"],[1146,1226,"Knowledge"],[1227,1390,"Knowledge"],[1400,1499,"Knowledge"],[1566,1637,"Knowledge"],[1684,1755,"Knowledge"],[1760,1828,"Knowledge"],[1856,1921,"Knowledge"],[1938,2037,"Knowledge"],[2054,2207,"Knowledge"],[3142,3213,"Knowledge"],[3227,3298,"Knowledge"],[3310,3379,"Knowledge"],[3382,3435,"Knowledge"]],"Comments":[]}
{"id":9756,"text":"277617\nМашинное обучение\nСодержание дисциплины включает в себя изучение основных моделей машинного обучения: методов поиска выбросов, метрических и логических методов обработки данных (метод ближайшего соседа, деревья решений, линейная регрессия и т.д.). Практические занятия ориентированы на исследование методов обработки данных и оценке качества построенных моделей.. Изучение моделей и классических алгоритмов машинного обучения (линейные, метрические, логические и байесовские модели) и формирование навыков их использования в профессиональной деятельности, и умения руководить разработкой архитектуры комплексных систем искусственного интеллекта. Изучение методов построения классических моделей машинного обучения (линейные, метрические, логические и байесовские модели), оценивание их точности и адекватности. Приобретение знаний в области построения и анализа моделей машинного обучения, разрабатывает унифицированные и обновляемые методологии описания, сбора и разметки данных, а также механизмы контроля за соблюдением указанных методологий. Приобретение умений в построении и анализе моделей машинного обучения различных типов (метрические, логические и вероятностные модели). Получение умений в области оценке адекватности построенных моделей. Способен разрабатывать и применять методы и алгоритмы машинного обучения для решения поставленных задач. Приобретение навыков в построении и анализе моделей машинного обучения различных типов (метрические, логические и вероятностные модели). Приобретение навыков в области оценки адекватности построенных моделей. Ставит задачи по разработке или совершенствованию методов и алгоритмов для решения комплекса задач предметной области.. Контрольная работа состоит из 5 заданий. Она может быть проведена как в форме компьютерного тестирования с автоматизированным оцениванием, так и в бумажном виде. Образец задачи (задания) Однажды я попросил, чтобы студенты ответили на два вопроса анкеты «ваш год рождения» и «ваш возраст». Из их ответов я сформировал таблицу, в которой был столбец Р=«год рождения студента» и Q=«возраст студента». Оказывается, значение коэффициента корреляции признаков P и Q зависит от месяца, в котором проводилось анкетирование (это не шутка!). Укажите два месяца, которым соответствует наименьшее (по модулю) значение коэффициента корреляции признаков P и Q. Варианты ответов:   январь,  февраль,  март,  апрель,  май,  июнь,  июль,  август,  сентябрь,  октябрь,  ноябрь,  декабрь.  Образцы задач (заданий) для контрольных (проверочных) работ даны в материалах онлайн-курса Шевлякова А.Н. «Машинное обучение» - URL: http:\/\/www.stepik.org\/course\/8057. Тест состоит из 10 вопросов Вопрос (пример) Искусственный нейрон имеет 2 входа с весами 1, 2 соответственно. Ко входному сигналу прибавляется число 1 и применяется сигмоидная функция. Чему будет равно значение на выходе из нейрона, если на первый вход было подано число 1,а на второй вход было подано число -1? Варианты ответа:  1 -0,5 0 0,5  Вопросы коллоквиума по теме \"Введение в машинное обучение и основные понятия статистики. Первичная обработка данных\"  1) Предмет дисциплины Машинное обучение 2) Основные понятия математической статистики.  3) Методы обработки данных 4) Алгоритмы поиска выборосов (критерий Шовене),  5) Алгоритмы восстановления пропущенных данных (метрические и статистические методы). Экзаменационный тест содержит 6 вопросов из разных тем курса. Проходной балл теста 70%. 1. Вопрос Первая и третья квартиль значений признака Р равны 2, 4 соответственно. Какие из следующих значений будут считаться выбросами? Варианты ответа:  -1,5 0,5 0 3 6,5 7,5 8 2. Вопрос Набор объектов A,B,C,D,E,F,G планируется разбить на 3 кластера. Для этого был применен графовый алгоритм и было построено остовное дерево минимального веса, состоящее из ребер AE, BD, CD, DF, ED, EG. Длины ребер соответственно равны 1, 2, 4, 1, 3, 2. Какие объекты попадут в один кластер с объектом A? Варианты ответа:  D C B G E F 3. Вопрос Какие существуют проблемы, связанные с построением модели линейной регрессии? Варианты ответа:  мультиколлинеарность бесконечное множество решений у системы уравнений, которая возникает при нахождении весов модели большие по модулю значения весов 4. Вопрос Искусственный нейрон имеет 2 входа с весами 1, 2 соответственно. Ко входному сигналу прибавляется число 1 и применяется сигмоидная функция. Чему будет равно значение на выходе из нейрона, если на первый вход было подано число 1,а на второй вход было подано число -1? Варианты ответа:  1 -0,5 0 0,5 5. Вопрос Где здесь формула Байеса? Варианты ответа:  Pr(B|A)=Pr(A|B)\/Pr(B)*Pr(A) Pr(B|A)=Pr(A|B)*Pr(A)\/Pr(B) Pr(B|A)=Pr(A|B)*Pr(B)\/Pr(A) Pr(B|A)=Pr(A|B*B\/A) 6. Вопрос Вспомните работу алгоритма Random Forest (случайный лес). К какому типу ансамбля он относится? Варианты ответа: градиентный бустинг взвешенное голосование голосование по большинству (комитет) Варианты тестовых заданий для экзамена даны в материалах онлайн-курса Шевлякова А.Н. «Машинное обучение» - URL: http:\/\/www.stepik.org\/course\/8057. . Введение в машинное обучение и основные понятия статистики. Первичная обработка данных. Предмет дисциплины, её объём, содержание и связь с другими дисци­плинами учебного плана. Обзор лите­ ратуры по курсу. Основные понятия математической статистики. Методы обработки данных: алгоритмы поиска выборосов (критерий Шовене), алгоритмы восстановления пропущенных данных (метрические и статистические методы). Кластеризация. Постановка задачи кластеризации, обзор алгоритмов кластеризации (FOREL, k-means.). Линейная регрессия и ее обобщения. Постановка задачи регрессии, модель линейной регрессии и ее обобщения (полиномиальная регрессия, лассо и регуляризация). Контроль качества модели для задачи регрессии. Задача классификации. Постановка задачи классификации. Модели машинного обучения для задачи классификации: метод ближайшего соседа, деревья решений, линейные классификаторы, метода опорных векторов. Контроль качества модели для задачи классификации. Вероятностные алгоритмы, байесовские классификаторы. Понятие об алгоритмах, выдающих вероятности. Байесовский классификатор. Контроль качества модели, выдающей вероятности. Отбор оптимального числа признаков и ансамбли алгоритмов. Важность задачи по отбору признаков для модели искусственного интеллекта. Методы отбора признаков: прямые и итерационные. Синтез новых признаков. Понятие об ансамбле алгоритмов. Виды ансамблей для задач классификации и регрессии. Градиентный бустинг. \n","cats":[],"entities":[[7,24,"Knowledge"],[89,107,"Knowledge"],[109,132,"Knowledge"],[134,253,"Knowledge"],[306,330,"Knowledge"],[333,368,"Knowledge"],[662,777,"Knowledge"],[848,895,"Knowledge"],[1075,1187,"Knowledge"],[1385,1497,"Knowledge"],[1530,1569,"Knowledge"],[2111,2134,"Knowledge"],[4056,4076,"Knowledge"],[4534,4549,"Knowledge"],[4710,4739,"Knowledge"],[5300,5343,"Knowledge"],[5345,5426,"Knowledge"],[5428,5442,"Knowledge"],[5443,5525,"Knowledge"],[5526,5560,"Knowledge"],[5561,5681,"Knowledge"],[5682,5728,"Knowledge"],[5729,5750,"Knowledge"],[5751,5783,"Knowledge"],[5784,5927,"Knowledge"],[5928,5978,"Knowledge"],[5979,6031,"Knowledge"],[6032,6076,"Knowledge"],[6077,6103,"Knowledge"],[6104,6152,"Knowledge"],[6152,6209,"Knowledge"],[6210,6284,"Knowledge"],[6284,6331,"Knowledge"],[6332,6356,"Knowledge"],[6356,6387,"Knowledge"],[6388,6439,"Knowledge"],[6440,6461,"Knowledge"]],"Comments":[]}
{"id":9757,"text":"274758\nПрограммирование\nДисциплина нацелена на изучение и освоение базовых понятий, методов и приемов программирования на языке программирования С++ в основном в парадигме процедурного программирования и охватывает следующие основные темы. Основные понятия программирования. Этапы жизненного цикла про-грамм. Общие сведения о языках программирования С и С++ и об используемой системе программирования. Простые стандартные типы данных (множество значений, набор операций, битовое представление). Организация ввода\/вывода. Основные управляющие структуры и их реализация на языке программирования. Итерация как базисная вычислительная схема и рекуррентные вычисления. Вычисление функций на последовательностях. Массивы и указатели. Программирование действий с массивами. Строки и тексты как массивы символов. Подпрограммы (функции). Структурированные типы данных. Работа с динамической памятью. Динамические массивы и списки. Работа с файлами. Классы. Шаблоны классов.. Цель изучения дисциплины состоит в получении знаний о задачах для решения на ЭВМ, основных методах и приемах разработки структурированных алгоритмов и программ, процедурных элементах языка С++. Задачи дисциплины: - изучение способов постановки и описания задач для решения на ЭВМ; - освоение языка программирования в необходимом для решения типовых задач объеме; - формирование знаний методов структурной декомпозиции типовых задач и её реализации. В ходе освоения дисциплины у студентов формируются знания методов структурной (функциональной) декомпозиции типовых задач для разделения программы на части и ее реализации как совокупности функций. В результате освоения дисциплины студенты получают умения самостоятельно составлять, тестировать, отлаживать и документировать программы на языке C++. Студенты получают навыки чтения, анализа, понимания и модификации простых программ, включающих базовые конструкции программирования и стандартные типы данных, а также навыки алгоритмизации, кодирования, тестирования и отладки программ при программировании типовых задач.\n","cats":[],"entities":[[145,148,"ProgrammingLanguage"],[240,274,"Knowledge"],[275,308,"Knowledge"],[350,351,"ProgrammingLanguage"],[354,357,"ProgrammingLanguage"],[402,494,"Knowledge"],[495,520,"Knowledge"],[521,594,"Knowledge"],[595,664,"Knowledge"],[665,707,"Knowledge"],[708,728,"Knowledge"],[729,767,"Knowledge"],[768,805,"Knowledge"],[806,829,"Knowledge"],[830,860,"Knowledge"],[861,891,"Knowledge"],[892,922,"Knowledge"],[923,940,"Knowledge"],[941,948,"Knowledge"],[949,965,"Knowledge"],[1049,1126,"Knowledge"],[1156,1159,"ProgrammingLanguage"],[1192,1246,"Knowledge"],[1352,1414,"Knowledge"],[1474,1537,"Knowledge"],[1664,1750,"Knowledge"],[1760,1763,"ProgrammingLanguage"],[1790,1847,"Knowledge"],[1932,2034,"Knowledge"]],"Comments":[]}
{"id":9758,"text":"287322\nМетоды разработки программных изделий\nВ дисциплине «Методы разработки программных изделий» излагаются вопросы разработки программных изделий, в том числе, рассмотрены проблемы организации процесса разработки программных изделий, технологии разработки, жизненный цикл, стратегии конструирования программного обеспечения, модели качества процессов разработки, руководство программным проектом, классические методы анализа и проектирования программных изделий, структурное и функциональное тестирование, язык визуального моделирования UML, унифицированный процесс разработки объектно-ориентированных программных изделий, автоматизация конструирования визуальной модели программной системы, перспективы развития методов разработки программных изделий.. Целью дисциплины является изучение основных методов разработки программного обеспечения, формирование знаний о принципах программирования, состава и структуры необходимого программного обеспечения, формирование необходимых навыков и умений для разработки и реализации ПО. Задачи дисциплины: - сформировать знания принципов программирования, состава и структуры ПО; - сформировать умения разработки ПО; - сформировать необходимые навыки для владения методами и средствами разработки программных изделий. Студенты получают знания об основных методах разработки программного обеспечения. После изучения дисциплины студенты обладают умениями разработки и реализации программного обеспечения. В ходе изучения дисциплины студенты осваивают навыки владения методами и средствами разработки программных изделий, которые необходимы при реализации, эксплуатации, поддержке, совершенствовании и утилизации сложных программных комплексов.. ИДЗ 1. Интерполирование и экстраполирование данных. Интерполяционный многочлен Лагранжа - По образцу разобранного примера восстановить многочлен Лагранжа, удовлетворяющий приведенным исходным данным. - Используя схему Эйткена, вычислить приближенное значение функции, заданной таблично при данном значении аргумента  ИДЗ 2. Интерполирование и экстраполирование данных. Интерполяционный многочлен Ньютона - Построить интерполяционный многочлен Ньютона по неравноотстоящей сетке узлов и найти приближенное значение интерполируемой функции при значении аргумента  - Вычислить приближенное значение функции по интерполяционной формуле Ньютона  для интерполяции вперед или назад ИДЗ 3. Численное дифференцирование и численное интегрирование функций - Для данных функций построить правую, левую и центральную первые разностные производные, вторую разностную производную на указанном интервале с данными шагами сетки   и сравнить полученные значения с точными значениями производных - Найти численное значение интеграла от функций, указанных в задании № 1, на заданном промежутке. При вычислении по подпрограмме parab выбрать, соответствующее меньшему значению шага ИДЗ 4. Решение систем нелинейных уравнений методом Ньютона - Любым способом, разобранным в теоретическом материале, решить методом Ньютона следующую систему уравнений Отчеты по практическим работам выполняются в электронном виде и отправляются преподавателю в системе Moodle. Отчет оформляется по шаблонам, приведенным на сайте СПбГЭТУ \"ЛЭТИ\". . Министерство науки и высшего образования Российской Федерации ФГАОУ ВО «Санкт-Петербургский государственный электротехнический университет «ЛЭТИ» имени В.И. Ульянова (Ленина)» ____________________________________________________________ ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1 Дисциплина Методы разработки программных изделий  ФКТИ 1. Исследовательское программирование 2. Жизненный цикл программного обеспечения   УТВЕРЖДАЮ Заведующий кафедрой                                                   В.В.Цехановский. Министерство науки и высшего образования Российской Федерации ФГАОУ ВО «Санкт-Петербургский государственный электротехнический университет «ЛЭТИ» имени В.И. Ульянова (Ленина)» ____________________________________________________________ ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1 Дисциплина Методы разработки программных изделий  ФКТИ 1. Основные принципы защитного программирования 2. Жизненный цикл программного обеспечения   УТВЕРЖДАЮ Заведующий кафедрой                                                   В.В.Цехановский. Введение. Организация процесса разработки программных изделий. Технология разработки программного обеспечения. Жизненный цикл разработки программных изделий. Стратегии конструирования программного обеспечения. Инкрементная модель. Спиральная модель. Компонентно-ориентированная модель. Модели качества процессов разработки. Программный проект. Процесс руководства проектом. Начало проекта. Измерения, меры и метрики. Процесс оценки. Анализ риска. Планирование. Трассировка и контроль. Конструктивная модель стоимости. Модель раннего этапа проектирования. Модель этапа постархитектуры. Предварительная оценка программного проекта. Анализ чувствительности программного проекта. Классические методы анализа. Структурный анализ. Диаграммы потоков данных. Описание потоков данных и процессов. Методы анализа, ориентированные на структуры данных. Метод анализа Джексона. Основы проектирования программных систем. Особенности процесса синтеза программных систем. Особенности этапа проектирования. Структурирование системы. Моделирование управления. Декомпозиция подсистем на модули. Связность модуля. Функциональная связность. Информационная связность. Коммуникативная связность. Процедурная связность. Временная связность. Логическая связность. Сложность программной системы. Характеристики иерархической структуры программной системы. Классические методы проектирования. Метод структурного проектирования. Проектирование для потока данных. Метод проектирования Джексона. Структурное тестирование программного обеспечения. Основные понятия и принципы тестирования программных изделий. Тестирование «черного ящика». Тестирование «белого ящика». Способ тестирования базового пути. Способы тестирования условий. Способ тестирования потоков данных. Тестирование циклов. Функциональное тестирование программного обеспечения. Особенности тестирования «черного ящика». Организация процесса тестирования программного обеспечения. Методика тестирования программных систем. Тестирование элементов. Тестирование интеграции. Нисходящее и восходящее тестирование интеграции. Тестирование правильности. Системное тестирование. Тестирование безопасности. Тестирование производительности. Язык визуального моделирования. Унифицированный язык моделирования UML. Предметы, отношения, диаграммы, механизмы расширения в UML. Унифицированный процесс разработки объектно-ориентированных программных изделий. Принципы объектно-ориентированного представления программных систем. Абстрагирование. Инкапсуляция. Модульность. Иерархическая организация. Объекты. Виды отношений между объектами. Связи. Агрегация. Классы. Виды отношений между классами. Ассоциации классов. Наследование. Полиморфизм. Агрегация. Зависимость. Конкретизация. Эволюционно-инкрементная организация жизненного цикла разработки. Рабочие потоки процесса. Модели. Управление риском. Этапы унифицированного процесса разработки. Этап начало (inception). Этап развитие (elaboration). Этап конструирование (construction). Этап переход (transition). Оценка качества проектирования. Автоматизация конструирования визуальной модели программной системы. Общая характеристика CASE-системы Rational Rose. Создание диаграммы Use Case. Создание диаграммы последовательности. Создание диаграммы классов. Создание компонентной диаграммы. Генерация программного кода. Заключение. Перспективы развития методов разработки программных изделий.\n","cats":[],"entities":[[7,44,"Knowledge"],[59,96,"Knowledge"],[236,257,"Knowledge"],[259,273,"Knowledge"],[275,325,"Knowledge"],[327,363,"Knowledge"],[365,397,"Knowledge"],[399,463,"Knowledge"],[465,506,"Knowledge"],[508,542,"Tool"],[544,623,"Knowledge"],[625,692,"Knowledge"],[694,753,"Knowledge"],[792,843,"Knowledge"],[866,893,"Knowledge"],[895,952,"Knowledge"],[1069,1095,"Knowledge"],[1097,1119,"Knowledge"],[1135,1156,"Knowledge"],[1204,1257,"Knowledge"],[1287,1339,"Knowledge"],[1385,1442,"Knowledge"],[1506,1558,"Knowledge"],[1691,1736,"Knowledge"],[1736,1771,"Knowledge"],[2008,2052,"Knowledge"],[2053,2087,"Knowledge"],[2365,2427,"Knowledge"],[2850,2901,"Knowledge"],[3463,3500,"Knowledge"],[3548,3587,"Knowledge"],[3961,3998,"Knowledge"],[4008,4052,"Knowledge"],[4056,4095,"Knowledge"],[4205,4257,"Knowledge"],[4258,4305,"Knowledge"],[4306,4352,"Knowledge"],[4353,4404,"Knowledge"],[4405,4425,"Knowledge"],[4426,4444,"Knowledge"],[4445,4480,"Knowledge"],[4481,4519,"Knowledge"],[4519,4539,"Knowledge"],[4539,4568,"Knowledge"],[4585,4611,"Knowledge"],[4612,4627,"Knowledge"],[4628,4641,"Knowledge"],[4642,4655,"Knowledge"],[4656,4679,"Knowledge"],[4680,4711,"Knowledge"],[4713,4749,"Knowledge"],[4750,4779,"Knowledge"],[4780,4824,"Knowledge"],[4825,4870,"Knowledge"],[4871,4899,"Knowledge"],[4899,4919,"Knowledge"],[4920,4945,"Tool"],[4946,4982,"Knowledge"],[4983,5035,"Knowledge"],[5036,5059,"Knowledge"],[5060,5101,"Knowledge"],[5102,5150,"Knowledge"],[5151,5185,"Knowledge"],[5185,5211,"Knowledge"],[5211,5236,"Knowledge"],[5237,5270,"Knowledge"],[5271,5288,"Knowledge"],[5290,5314,"Knowledge"],[5315,5340,"Knowledge"],[5341,5367,"Knowledge"],[5368,5390,"Knowledge"],[5391,5411,"Knowledge"],[5412,5433,"Knowledge"],[5434,5464,"Knowledge"],[5465,5524,"Knowledge"],[5525,5660,"Knowledge"],[5661,5711,"Knowledge"],[5712,5773,"Knowledge"],[5774,5803,"Knowledge"],[5803,5832,"Knowledge"],[5832,5867,"Knowledge"],[5868,5897,"Knowledge"],[5898,5933,"Knowledge"],[5934,5955,"Knowledge"],[5955,6008,"Knowledge"],[6009,6051,"Knowledge"],[6051,6110,"Knowledge"],[6110,6152,"Knowledge"],[6153,6176,"Knowledge"],[6177,6201,"Knowledge"],[6202,6250,"Knowledge"],[6251,6277,"Knowledge"],[6278,6301,"Knowledge"],[6302,6329,"Knowledge"],[6329,6361,"Knowledge"],[6362,6393,"Knowledge"],[6394,6433,"Tool"],[6434,6493,"Tool"],[6494,6575,"Knowledge"],[6575,6643,"Knowledge"],[6644,6660,"Knowledge"],[6660,6675,"Knowledge"],[6675,6687,"Knowledge"],[6688,6713,"Knowledge"],[6715,6723,"Knowledge"],[6724,6774,"Knowledge"],[6774,6898,"Knowledge"],[6899,6964,"Knowledge"],[6965,6988,"Knowledge"],[6990,6997,"Knowledge"],[6998,7015,"Knowledge"],[7018,7061,"Knowledge"],[7061,7178,"Knowledge"],[7179,7210,"Knowledge"],[7211,7280,"Knowledge"],[7280,7328,"Knowledge"],[7338,7357,"Tool"],[7367,7395,"Tool"],[7406,7423,"Tool"],[7434,7456,"Tool"],[7499,7558,"Knowledge"]],"Comments":[]}
{"id":9759,"text":"274239\nОсновы теории управления автономными системами\nАвтономные системы, являющиеся объектом изучения этой дисциплины, - это подвижные роботы, решающие сервисные задачи. Инженеры, разрабатывающие таких роботов, предоставляют интерфейс для низкоуровневого управления системами, поэтому программирование движения по нестандартным траекториям лежит на пользователе. В рамках этой дисциплины рассматриваются способы построения физичной траектории движения, особенности алгоритмов управления автономными системами, а также принципы устройства симуляторов.. Сформировать у обучающихся знания, умения и навыки обоснованного и результативного применения алгоритмов управления автономными системами. Обучить применению существующих алгоритмов теории управления, а также освоению новых методов и алгоритмов управления автономными системами. Дать знания о существующих методах и алгоритмах управления автономными системами. Дать умения разрабатывать алгоритмы управления автономными системами и применять методы компьютерного зрения для управления автономными системами. Привить навыки разработки и анализа методов управления автономными системами.. ИДЗ состоит в работе с симулятором, а также в проведении аналитических вычислений траектории движения. Задача в ИДЗ - построить траекторию движения по заданным данным начала траектории и конца. Оценивание ИДЗ происходит комплексно, по результатам ставится оценка по четырехбалльной шкале, которая впоследствии влияет на допуск к экзамену. Критерии оценивания приведены в разделе 6.4 Методика текущего контроля.. . Министерство науки и высшего образования Российской Федерации ФГАОУ ВО «Санкт-Петербургский государственный электротехнический университет «ЛЭТИ» имени В.И. Ульянова (Ленина)» ____________________________________________________________ ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1 Дисциплина Основы теории управления автономными системами 1. Голономное движение. Примеры, особенности, способы задания траектории с помощью дифференциальных уравнений 2. ПИД-регулятор. Границы применимости. УТВЕРЖДАЮ Заведующий кафедрой                                                   К.В. Кринкин. Введение. Проблемы и задачи при управлении автономными системами. Линейные и нелинейные автономные системы. Простейшие примеры управления линейными системами. Тема 1. Основные законы движения физического тела. Степени свободы движения роботов. Матрицы поворота и смещения. Экспоненциальные координаты вращения. Однородные матрицы преобразования, экспоненциальные координаты движения твердого тела. Тема 2. Прямая и обратная кинематика. Кинематика скорости с использованием пространственного якобиана и якобиана тела, статика открытых цепей, особенности и манипулируемость. Аналитическая и численная обратная кинематика. Тема 3. Регуляторы для движения по траектории. PID-регулятор, адаптивный регулятор. Нечёткий регулятор. Достоинства, недостатки и области применения. Тема 4. Функция Ляпунова. Функция Ляпунова, как инструмент решения дифференциальных уравнений. Использование Функции Ляпунова для построения физичной траектории для линейных систем. Преимущества и недостатки управления при помощи функции Ляпунова. Тема 5. Системы управления движением робота. Планирование движения на дискретизированной сетке C-пространства. Средства планирования на основе случайной выборки. Виртуальные потенциальные поля и нелинейная оптимизация. Системы с обратной связью. Заключение. Потенциал применения аналитических и численных методов управления. Аппроксимация и интерполяция траекторий.\n","cats":[],"entities":[[7,53,"Knowledge"],[636,690,"Knowledge"],[724,752,"Knowledge"],[777,830,"Knowledge"],[837,912,"Knowledge"],[919,982,"Knowledge"],[995,1022,"Tool"],[1069,1137,"Knowledge"],[1827,1874,"Knowledge"],[1878,1897,"Knowledge"],[1987,2002,"Tool"],[2286,2328,"Knowledge"],[2329,2362,"Knowledge"],[2363,2391,"Knowledge"],[2392,2429,"Knowledge"],[2430,2516,"Knowledge"],[2524,2554,"Knowledge"],[2555,2691,"Knowledge"],[2692,2738,"Knowledge"],[2747,2785,"Tool"],[2786,2799,"Tool"],[2800,2822,"Tool"],[2823,2841,"Tool"],[2843,2887,"Knowledge"],[2897,2913,"Knowledge"],[2915,2983,"Tool"],[2984,3071,"Knowledge"],[3071,3136,"Knowledge"],[3145,3181,"Tool"],[3182,3248,"Knowledge"],[3248,3298,"Tool"],[3299,3354,"Knowledge"],[3356,3381,"Tool"],[3395,3460,"Knowledge"],[3462,3501,"Knowledge"]],"Comments":[]}
{"id":9760,"text":"274431\nРазработка приложений в распределенной среде\nДисциплина посвящена изучению основных принципов распределённых систем. В теоретической части курса рассматриваются вопросы о взаимодействии и синхронизации процессов, достижении непротиворечивости реплицируемых данных, обеспечении отказоустойчивости в распределенных системах. В процессе освоения дисциплины формируются практические навыки разработки распределенных приложений на объектно-ориентированном языке программирования Java с использованием различных моделей взаимодействия процессов. . Целью дисциплины является изучение принципов распределённых систем и формирование практических навыков разработки распределенных приложений с использованием различных моделей взаимодействия процессов. Получение теоретических знаний в области взаимодействия и синхронизации процессов, достижения непротиворечивости реплицируемых данных, обеспечения отказоустойчивости в распределенных системах. Формирование практических навыков разработки распределенных приложений на объектно-ориентированном языке программирования Java. Освоение подходов к построению архитектуры распределенного приложения. Знания принципов построения распределенных систем; методов и инструментальных средств систем искусственного интеллекта, критериев их выбора и методов комплексирования; основных критериев эффективности и качества функционирования системы искусственного интеллекта; методов, языков и программных средств разработки программных компонентов систем искусственного интеллекта. Умения разрабатывать распределенные приложения; выбирать, применять и интегрировать методы и инструментальные средства систем искусственного интеллекта, критерии их выбора и методы комплексирования; выбирать, адаптировать, разрабатывать и интегрировать программные компоненты систем искусственного интеллекта с учетом основных критериев эффективности и качества функционирования. Навыки использования интегрированной среды разработки в процессе создания распределенных приложений.. Введение. Предмет дисциплины и ее задачи. Историческая справка о развитии распределенных систем. Значение развития этого направления для искусственного интеллекта. Структура содержания дисциплины. Характеристика литературных источников. Модели взаимодействия процессов в распределенных системах. Потоки и процессы. Модели взаимодействия процессов - удаленное обращение к методам, системы очередей сообщений. Примеры использования удаленного обращения к методам на практике. Типы процессов в распределенных системах. Внутренняя организация процессов. Многопоточные технологии. Модель клиент-сервер и ее организация. Варианты миграции программ и процессов с машины на машину. Способы использования имен в распределенных системах. Имя и сущность. Организация доступа к сущности. Пространства имен. Разрешение имени. Реализация системы именования. Серверы имен. Примеры существующих реализаций пространств имен. Мобильные сущности. Подходы к их локализации. Организация имен. Взаимодействие сущностей именования и локализации. Механизмы автоматического удаления сущностей. Синхронизация процессов в распределенных системах. Синхронизация на основе реального времени. Синхронизация с одним относительным параметром упорядочивания. Определение распределенного глобального состояния и его запись в процессе синхронизации. Алгоритмы голосования. Распределенные взаимные исключения. Распределенные транзакции, их классификация и реализация. Реплицируемые данные в распределенных системах. Понятие репликации данных. Реплицируемые объекты. Непротиворечивость реплицируемых данных. Способы достижения непротиворечивости данных в распределенных системах. Модели непротиворечивости данных в распределенных системах с разделяемой памятью. Реализации моделей непротиворечивости - распространение обновлений и поддержание непротиворечивости реплик. Заключение. Основные направления дальнейшего развития и практического использования распределенных систем и технологий в искусственном интеллекте. \n","cats":[],"entities":[[82,122,"Knowledge"],[178,218,"Knowledge"],[272,302,"Knowledge"],[386,429,"Knowledge"],[481,485,"ProgrammingLanguage"],[512,545,"Tool"],[584,615,"Knowledge"],[1065,1069,"ProgrammingLanguage"],[1235,1260,"Tool"],[1486,1511,"Tool"],[1597,1664,"Knowledge"],[1796,1821,"Tool"],[2232,2290,"Knowledge"],[2310,2402,"Knowledge"],[2404,2468,"Knowledge"],[2469,2510,"Knowledge"],[2511,2544,"Knowledge"],[2545,2570,"Knowledge"],[2571,2609,"Knowledge"],[2610,2668,"Knowledge"],[2669,2722,"Knowledge"],[2738,2769,"Knowledge"],[2771,2788,"Knowledge"],[2790,2806,"Knowledge"],[2808,2837,"Knowledge"],[2839,2851,"Knowledge"],[2852,2902,"Knowledge"],[2903,2922,"Knowledge"],[2949,2966,"Knowledge"],[2967,3018,"Knowledge"],[3018,3063,"Knowledge"],[3064,3115,"Knowledge"],[3115,3157,"Knowledge"],[3158,3221,"Knowledge"],[3221,3309,"Knowledge"],[3310,3332,"Knowledge"],[3333,3368,"Knowledge"],[3369,3426,"Knowledge"],[3427,3474,"Knowledge"],[3475,3501,"Knowledge"],[3501,3524,"Knowledge"],[3525,3565,"Knowledge"],[3566,3637,"Knowledge"],[3638,3719,"Knowledge"],[3720,3826,"Knowledge"],[3840,3975,"Knowledge"]],"Comments":[]}
{"id":9761,"text":"280954\nASP-программирование\nВ курсе рассматриваются особенности языка программирования наборов ответов (ASP) и вопросы разработки текста программ и формирования на их основе стабильных моделей из правил и фактов, решающих поставленную задачу. Рассматриваются варианты решения нескольких NP-полных задач. Изучаются основы программирования наборов ответов с использованием ограничений. Осваиваются механизмы вывода и доказательства, используемые в ASP.. Приобретение знаний об особенностях применения языка программирования наборов ответов (ASP) для формирования стабильных моделей из правил и фактов, решающих задачи для систем искусственного интеллекта. Формирование расширенного представления парадигмы логического программирования посредством приобретения практических навыков программирования наборов ответов на ASP, проведение экспериментальной проверки работоспособности программных компонентов систем искусственного интеллекта по обеспечению требуемых критериев эффективности и качества функционирования. Знание основ программирования на ASP приложений для систем искусственного интеллекта и механизмов вывода и доказательства, используемых в ASP. Приобретение умений анализировать профессиональную информацию, выделять в ней главное, структурировать и оформлять с использованием языка ASP приложения для систем искусственного интеллекта. Освоение подходов и навыков решения сложных (в основном NP-сложных) задач искусственного интеллекта с использованием языка ASP.. 1. Что из перечисленного не может включать программа на языке ASP? а) факты, б) правила, в) исключения, г) ограничения целостности, д) ограничения исключений, е) операторы, ж) описания переменных 2. Могут ли условные операторы встречаться как в теле, так и в голове правила? а) да, б) нет, в) вопрос некорректен Критерии оценивания: \"зачтено\" - правильные ответы на вопросы теста составляют более 51% от максимально возможного; \"не зачтено\" - правильные ответы на вопросы теста составляют менее 50% от максимально возможного. . Введение. Язык программирования ASP. Загрузка и установка. Термы. Построение простой программы. Использование дизъюнкции и задание альтернатив. Логические константы и арифметика. Условия и условные литералы. Агрегаторы. Оптимизация. Подходы к решению задач с использованием ASP. Задача о расстановке ферзей. Задача коммивояжера. Задача о раскрашивании графа. Задача о максимальной клике. Судоку. Программирование с использованием ограничений. Использование ограничений в ASP. Задача SEND+MORE=MONEY. Механизмы вывода в ASP и использование ASP для задач семантического Web. Общее описание. Принципы построения SAT-решателей. Переход от WWW к Semantic Web. ASP - средство обработки знаний на OWL.\n","cats":[],"entities":[[64,108,"ProgrammingLanguage"],[313,382,"Knowledge"],[396,450,"Knowledge"],[465,652,"Knowledge"],[666,732,"Knowledge"],[1011,1132,"Knowledge"],[1167,1343,"Knowledge"],[1462,1472,"ProgrammingLanguage"],[1530,1539,"ProgrammingLanguage"],[2012,2038,"ProgrammingLanguage"],[2098,2145,"Knowledge"],[2146,2180,"Knowledge"],[2181,2209,"Knowledge"],[2210,2221,"Knowledge"],[2222,2234,"Knowledge"],[2235,2280,"Knowledge"],[2398,2444,"Knowledge"],[2444,2477,"Knowledge"],[2502,2574,"Knowledge"],[2591,2625,"Knowledge"],[2626,2656,"Knowledge"],[2657,2696,"Knowledge"]],"Comments":[]}
